{"version":3,"sources":["logo.svg","utils/Constants.js","utils/Fetch.js","api/EthereumAPI.js","screens/App.js","serviceWorker.js","index.js"],"names":["module","exports","URL","INFURA_URL","fetchRetry","url","options","a","n","i","fetch","response","ok","json","console","log","getCurrentBalance","address","Constants","method","body","JSON","stringify","data","result","getCurrentBlock","App","useState","contractAddress","currentBalance","setCurrentBalance","currentBlockHeight","setCurrentBlockHeight","useEffect","Promise","all","balance","block","parseInt","className","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,kC,wMCIrCC,G,MAAMC,iECJL,SAAeC,EAAtB,oC,4CAAO,WAA0BC,EAAKC,GAA/B,+BAAAC,EAAA,sDAAwCC,EAAxC,+BAA4C,EACtCC,EAAI,EADV,YACaA,EAAID,GADjB,0CAG4BE,MAAML,EAAKC,GAHvC,YAGWK,EAHX,QAIkBC,GAJlB,2CAM0BD,EAASE,OANnC,2EAQaC,QAAQC,IAAR,MARb,sEAaID,QAAQC,IAAR,MAbJ,QACoBN,IADpB,iF,sBCGA,SAAeO,EAAtB,kC,4CAAO,WAAiCC,GAAjC,eAAAV,EAAA,sEACeH,EAAWc,EAAe,CACxCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjB,QAAU,MACV,GAAK,EACL,OFDiB,iBEEjB,OAAS,CAACL,EAAQ,cAPvB,cACGM,EADH,yBAUIA,EAAKC,QAVT,4C,sBAaA,SAAeC,IAAtB,+B,4CAAO,4BAAAlB,EAAA,sEACeH,EAAWc,EAAe,CACxCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjB,QAAU,MACV,GAAK,EACL,OFfiB,kBEgBjB,OAAS,OAPd,cACGC,EADH,yBAUIA,EAAKC,QAVT,4C,sBC4BQE,MAtCf,WAAgB,IAAD,EAC2BC,mBHFlB,8CGCT,mBACNC,EADM,aAE+BD,mBAAS,IAFxC,mBAENE,EAFM,KAEUC,EAFV,OAGuCH,mBAAS,GAHhD,mBAGNI,EAHM,KAGcC,EAHd,KAoBb,OAdAC,qBAAU,WACN,sBAAE,kCAAA1B,EAAA,sEACgC2B,QAAQC,IAAI,CACtCnB,EAAkBY,GAClBH,MAHN,mCACSW,EADT,KACiBC,EADjB,KAKEP,EAAmBQ,SAASF,EAAS,KACrCJ,EAAuBM,SAASD,EAAO,KANzC,0CAAF,KAQF,IAEFvB,QAAQC,IAAIc,GACZf,QAAQC,IAAIgB,GAGV,yBAAKQ,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,2DAC8Bd,GAE9B,6DACiCC,GAEjC,mEACuCE,MCzB3BY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.44d95613.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","//define all constants here\n\nconst INFURA_URL = 'https://mainnet.infura.io/v3/';\nconst PROJECT_ID = 'ec0d7f0287f04925a468ce1a574dc30a';\nconst URL = INFURA_URL+PROJECT_ID;\nconst DEFAULT_ADDRESS = '0xaEdd8BC2c9AbC2F7887fF4bbb33cA00874dB05A5';\n\nconst METHOD_CURRENT_BLOCK = 'eth_blockNumber';\nconst METHOD_ETHER_BALANCE = 'eth_getBalance';\n\nexport {\n    INFURA_URL,\n    PROJECT_ID,\n    URL,\n    DEFAULT_ADDRESS,\n    METHOD_CURRENT_BLOCK,\n    METHOD_ETHER_BALANCE,\n};\n","export async function fetchRetry(url, options, n = 3) {\n    for (let i = 0; i < n; i++) {\n        try {\n            const response = await fetch(url, options);\n            if (response.ok) {\n                try {\n                    return await response.json();\n                } catch (error) {\n                    console.log(error);\n                }\n            }\n            break;\n        } catch (err) {\n           console.log(err)\n        }\n    }\n}\n","import * as Constants from '../utils/Constants';\nimport {fetchRetry} from '../utils/Fetch';\n\nexport async function getCurrentBalance(address) {\n    const data =await fetchRetry(Constants.URL, {\n        method: \"POST\",\n        body: JSON.stringify({\n            \"jsonrpc\":\"2.0\",\n            \"id\":1,\n            \"method\":Constants.METHOD_ETHER_BALANCE,\n            \"params\":[address,\"latest\"]\n        }),\n    });\n    return data.result;\n}\n\nexport async function getCurrentBlock() {\n    const data =await fetchRetry(Constants.URL, {\n        method: \"POST\",\n        body: JSON.stringify({\n            \"jsonrpc\":\"2.0\",\n            \"id\":1,\n            \"method\":Constants.METHOD_CURRENT_BLOCK,\n            \"params\":[]\n        }),\n    });\n    return data.result;\n}\n","import React , {useState, useEffect} from 'react';\nimport logo from '../logo.svg';\nimport '../styles/App.css';\nimport {getCurrentBalance, getCurrentBlock} from '../api/EthereumAPI';\nimport * as Constants from '../utils/Constants'\n\nfunction App() {\n  const [contractAddress,setcntAddress] = useState(Constants.DEFAULT_ADDRESS);\n  const [currentBalance, setCurrentBalance] = useState(0);\n  const [currentBlockHeight, setCurrentBlockHeight] = useState(0);\n\n\n  useEffect(() => {\n      ( async () => {\n          const [balance,block] = await Promise.all([\n              getCurrentBalance(contractAddress),\n              getCurrentBlock(),\n          ]);\n          setCurrentBalance( parseInt(balance, 16));\n          setCurrentBlockHeight( parseInt(block, 16));\n      })();\n  },[]);\n\n  console.log(currentBalance);\n  console.log(currentBlockHeight);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n        The address being checked is {contractAddress}\n        </p>\n        <p>\n         whose current ether balance is {currentBalance}\n        </p>\n        <p>\n         The current Ethereum block height is {currentBlockHeight}\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './screens/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}